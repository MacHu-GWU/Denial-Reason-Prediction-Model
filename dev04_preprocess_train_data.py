##encoding=utf-8
##author=Samson Su
##date=2015-04-15

"""
statistical significant columns
-------------------------------
    ["Revenue.Code", "Service.Code", "Procedure.Code", "Diagnosis.Code", "Subscriber.Index"]
    
    This script is to re-label them into three group
"""

from dev01_understand_the_data import read_data
from angora.DATA.js import load_js, safe_dump_js
import numpy as np, pandas as pd

def group_category_key():
    """for column in ["Revenue.Code", "Service.Code", "Procedure.Code", "Diagnosis.Code", "Subscriber.Index"]
    group distinct keys (usually > 100) into 3 group:
        1. high probability group (if group == 1, then P(class == 1) >= 0.1 (estimated))
        2. low probability group (if group == 2, then P(class == 1) < 0.005 (estimated))
        3. zero probability group (if group == 2, class = 0)
    """
    df = read_data()
    class_label = load_js("class_label.json", enable_verbose=False)
    df["_class"] = class_label
    s = list()
    
    # group "Revenue.Code" into 1, 2, 3.
    # 1 = high probability group
    # 2 = low probability group
    # 3 = 0 probability group
    column_name = "Revenue.Code"
    s.clear()
    for i in df[column_name]:
        if i in ["0810", "0811", "0124", "0261", "0260", "0331", "0914", "0174", " ", "0,634", "0173", "0682", "0126", "0128", "0172", "0127", "0200", "0821", "0134", "0302", "0740", "0249", "0270", "0771", "0361", "0310", "0434"]:
            s.append(1)
        elif i in ["0210", "0275", "0122", "0610", "0206", "0258", "0444", "0278", "0117", "0259", "0121", "0112", "0276", "0731", "0750", "0460", "0360", "0271", "0730", "0307", "0424", "0370", "0250", "0410", "0940", "0305", "0350", "0921", "0480", "0111", "0351", "0920", "0636", "0309", "0300", "0390", "0301", "0450", "0440", "0306", "0311", "0324", "0710", "0341", "0272", "0343", "0942", "0171", "0482", "0420", "0490", "0483", "0312", "0481", "0352", "0510", "0402", "0320", "0720", "0762", "0761", "0430", "0403"]:
            s.append(2)
        else:
            s.append(3)
    df[column_name] = s

    # group "Service.Code" into 1, 2, 3.
    # 1 = high probability group
    # 2 = low probability group
    # 3 = 0 probability group
    column_name = "Service.Code"
    s.clear()
    for i in df[column_name]:
        if i in ["UNI", "RL8Y", "RM8W", "DU7O", "IH7O", "RM8I", "RI7Y", "SB7W", "GB7A", "NI7I", "OVV", "RM9I", "RR8I", "IMY", "RT8I", "RY8W", "RY7I", "IC7I", "SU7A", "ER7I"]:
            s.append(1)
        elif i in ["TO7W", "TE7O", "CC7I", "HV7I", "MR7O", "IN7I", "AL7I", "DI7O", "CT8Y", "RB7W", "RV8W", "CT7I", "RB8I", "RK8Y", "RB7I", "OE7I", "RY8I", "OP7O", "LA7O", "NS7I", "CL7O", "MR7Y", "ER7O", "CT7Y", "CT7O", "RA7O", "MD7O", "TH7O"]:
            s.append(2)
        else:
            s.append(3)
    df[column_name] = s
    
    # group "Procedure.Code" into 1, 2, 3.
    # 1 = high probability group
    # 2 = low probability group
    # 3 = 0 probability group
    column_name = "Procedure.Code"
    s.clear()
    for i in df[column_name]:
        if i in ["56420", "96411", "8140190", "8369590", "8217290", "8370490", "09998", "8370190", "96420", "73218LT", "83735CD", "G0257", "80053CD", "0042T", "0159T", "96366", "96367", "8399390", "90999G2", "90901GP", "80069CD", "96361", "96368", "90675", "96376"]:
            s.append(1)
        elif i in ["82728CD", "90746", "8124190", "Q2039", "8124090", "96365", "9637559", "84550CF", "9636559", "86580", "9637259", "86141", "9637659", "86708", "86709", "19125", "9636059", "96372", "96375", "Q4081JA", "83090", "C1751", "86704", "84460CF", "90732", "84132CD", "C1788", "J1756", "C2617", "87340", "C1781", "96374", "9637459", "99281", "76098", "84540", "97802", "96360", "86706", "J1644", "A4913", "90471", "J2501", "95800", "86803", "83970", "80196", "85027", "82003", "99282", "83540", "90999", "84702", "90970", "J2785", "99213", "85007", " ", "82055", "82150", "99285", "C1713", "90715", "88307", "71250", "80101", "82247", "83036", "86920", "99211", "87205", "87070", "97014GP", "V2632", "84100", "83690", "84703", "76700", "80053", "86850", "9928325", "70450", "J2175", "87086", "86900", "83735", "86901", "J2405", "36415", "J1100", "J7120", "85025", "J3490", "J0690", "80048", "93005", "99283", "81001", "J7030", "85610", "77057", "J3010", "77052", "J2250"]:
            s.append(2)
        else:
            s.append(3)
    df[column_name] = s
    
    # group "Diagnosis.Code" into 1, 2, 3.
    # 1 = high probability group
    # 2 = low probability group
    # 3 = 0 probability group
    column_name = "Diagnosis.Code"
    s.clear()
    for i in df[column_name]:
        if i in ["2929", "29690", "V202", "29663", "29622", "9962", "67524", "5193", "V045", "29530", "7999", "430", "29664", "5711", "79095", "30411", "29189", "6162", "29570", "29630", "29644", "5289", "20240", "99741", "37943", "9352", "V08", "V1255", "V5041", "80225", "6108", "57480", "5070", "V6284", "52460", "8024", "99681", "V3101"]:
            s.append(1)
        elif i in ["75249", "71100", "29660", "78722", "2273", "6868", "64844", "73671", "37730", "61804", "6146", "V5831", "2989", "7503", "72992", "29181", "2452", "80841", "8250", "66111", "9950", "29640", "9220", "99563", "7222", "29650", "65811", "29632", "52403", "99676", "27541", "4168", "2102", "2182", "0090", "34691", "5738", "68100", "2776", "1809", "5362", "29633", "29680", "61801", "34290", "72990", "64981", "2912", "6170", "1746", "6183", "78499", "52489", "53551", "42823", "30501", "3682", "V3000", "7226", "64303", "24200", "8832", "57470", "9726", "29689", "5409", "8248", "73730", "2181", "57450", "85011", "6121", "64893", "6253", "99883", "96501", "193", "53190", "6268", "42841", "226", "57400", "4280", "1960", "69589", "2777", "2180", "1743", "1742", "179", "6110", "6272", "60001", "53240", "V552", "6827", "5559", "6185", "8600", "81305", "07054", "0479", "45340", "6824", "5551", "38611", "5941", "2271", "72888", "80703", "6227", "6823", "6184", "4377", "62212", "72210", "2891", "5533", "5722", "8246", "V510", "6111", "2572", "2720", "5789", "55321", "3688", "2189", "2410", "1541", "5856", "65231", "6262", "5609", "5641", "7455", "1550", "2875", "220", "78720", "30300", "81209", "566", "99812", "56032", "4321", "1745", "78630", "5119", "5400", "34590", "57511", "30400", "4940", "5770", "25201", "75612", "78057", "6181", "61179", "1749", "27651", "73819", "78799", "00845", "56400", "99832", "5712", "4589", "42741", "78701", "4659", "57420", "30500", "7804", "30391", "5693", "1744", "6100", "41401", "55092", "5589", "61172", "99674", "1741", "61189", "49392", "82525", "9351", "V5331", "2910", "78901", "5303", "80126", "6271", "2141", "7842", "59970", "25002", "78791", "1748", "8500", "78900", "217", "1985", "79389", "42731", "78906", "99673", "7384", "78009", "650", "6210", "51881", "81342", "78659", "72402", "56210", "2851", "49322", "486", "55090", "2920", "56211", "V700", "57410", "4359", "5921", "03849", "78903", "53550", "7840", "2330", "64403", "33819", "6826", "78907", "V5811", "6202", "78652", "431", "V6759", "78079", "72252", "7802", "2809", "V7651", "7295", "78650", "65421", "0389", "43491", "78909", "2859", "V7611", "V7612", "3669", "V5789", "V571"]:
            s.append(2)
        else:
            s.append(3)
    df[column_name] = s
    
    # group "Subscriber.Index" into 1, 2, 3.
    # 1 = high probability group
    # 2 = low probability group
    # 3 = 0 probability group
    column_name = "Subscriber.Index"
    s.clear()
    for i in df[column_name]:
        if i in ["30617650", "3224750", "2464150", "34453650", "81945300", "28271050", "79011300", "63599300", "77323250", "18717450", "30620100", "25040850", "35710800", "32903550", "33034650", "50205700", "32937950", "38980350", "21411950", "23229950", "38443450", "36289550", "29065250", "32948400", "16463700", "2791000", "27769900", "7925200", "45333700", "35742600", "37985100", "27205750", "17798400", "22579300", "8225700", "18190400", "80245400", "2021400", "21740050", "17563200", "63680900", "20329400", "27052450", "18428750", "36000600", "23251050", "25632150", "18290750", "56098800", "28331600", "52342900", "23872350", "21411900", "55354000", "27271700", "26112200", "25307700", "2368000", "19463150", "28327000", "5126600", "35500900", "59664850", "78029100", "23600400", "37747900", "43231100", "33947350", "39642100", "8986750", "25340900", "36850350", "45394900", "36522050", "30971800", "35236000", "25925150", "9558950", "3415200", "23231800", "78167200", "24861100", "39486500", "43319650", "35391000", "48125150", "3406000", "79766350", "21939800", "32407550", "34850350", "4011300", "20590500", "24419250"]:
            s.append(1)
        elif i in ["25667550", "29987400", "33372800", "24863400", "21205800", "2768450", "30963950", "42531150", "27113400", "24551750", "81361500", "21319650", "26224500", "43596300", "26838500", "26747500", "34118600", "27011650", "7894550", "20668600", "32145900", "27354500", "24048350", "13142350", "6854000", "62696400", "38664400", "57374350", "38481950", "31395950", "21163700", "64475200", "83426150", "15927900", "42850850", "24014350", "20210800", "27487200", "38183950", "20808200", "25008200", "30484050", "43628900", "1616100", "34519350", "22565450", "22782300", "31170400", "27086200", "45244450", "48936250", "22998650", "21661200", "24800450", "25662400", "34197350", "18568600", "11767700", "21429850", "23708250", "53694700", "26291500", "30310850", "19963750", "6949100", "16349300", "25044850", "26708750", "32538700", "2042300", "26764650", "22379250", "32031200", "22166900", "33513300", "40471050", "23513650", "17707450", "33413400", "26215150", "22026050", "31776400", "30980650", "78410450", "22331550", "28509800", "19595400", "22313250", "9856800", "23016200", "2754550", "20779000", "19905750", "51428950", "25752700", "53221150", "46415950", "39957150", "42945650", "13965500", "55716850", "19819050", "22693500", "55930900", "41542500", "50240050", "33258400", "36621350", "47221450", "35695200", "2223300", "6226500", "20187950", "37428850", "32391500", "22740400", "1610450", "27325500", "80205250", "40829700", "39362250", "49582250", "55940150", "30424450", "7835350", "36303400", "19001650", "50653000", "17201750", "31309800", "21278100", "3160450", "43433100", "21525600", "48847850", "28027750", "57868650", "31362600", "35881100", "27609650", "25051900", "22479100", "62874450", "1109950", "26410750", "34893300", "22051400", "30488600", "17252050", "25459650", "4473050", "46576300", "2784700", "62107700", "27744800", "59285150", "9154250", "26867950", "36441150", "20922750", "33364950", "26570700", "11875450", "1473250", "58674050", "23261950", "21418450", "26578950", "45027750", "25557900", "21778600", "22449200", "797000", "28193900", "34250500", "21199950", "20454200", "37055750", "5281450", "2859450", "22270600", "21161550", "15843550", "19901800", "24288350", "41031300", "33198500", "32213450", "34318000", "37875800", "45351700", "52078250", "1615600", "28988500", "22044100", "22094150", "27367500", "58952350", "80528700", "1610600", "20064700", "29304800", "22026000", "24254200", "39482800", "39682200", "45814700", "37983000", "24105300", "38115250", "30334050", "1208550", "25019900", "30616550", "16639400", "1609800", "24455500", "20512150", "35560250", "20730650", "23130200", "26108850", "1230350", "1611300", "1610800", "29805150", "1618750", "29454850", "19701950", "61919900", "20981300", "1612800", "26597750", "35982100", "18166350", "39167250", "25304100", "25552100", "23876550", "1610000", "20549050", "26084000", "32638350", "24587150", "39957600", "26745750", "51513550", "1614000", "1618200", "6169900", "26536850", "32774300", "27443700", "1616600", "1610100", "25229800", "41751750", "1611550", "10763600", "33290200", "27905550", "33113250", "23639050", "56336000", "37264150", "39394250", "45290150", "1615550", "34867250", "1611150", "1609700", "1611850", "2441550", "45588200", "18945300", "1616400", "15669550", "25841200", "37697100", "40392750", "1609500", "1617550", "1614550", "34159100", "35455300", "23757450", "26756550", "22454650", "28934800", "1611450", "23041150", "1613000", "1616500", "1612500", "25888550", "30341800", "1609100", "1611400", "1614800", "1609400", "26342750", "31684350", "1611650", "33747250", "42235250", "26841200", "1616700", "1613600", "1608950", "27867750", "1616800", "30618150", "24563100", "1613700", "25977700", "1618400", "1617650", "1614750", "1617300", "1612950", "1615500", "1617000", "22308200", "1613150", "1616550", "1615750", "1612150", "20248000", "20061300", "39150450", "1612350", "1612550", "1612450", "1610550", "1613550", "1612700", "1609650", "36717950", "1617900", "1614150", "1614100", "1613500", "1610350", "1618500", "1614700", "1614400", "1612600", "24656000", "1616050", "9723700", "1617750", "1617200", "1609000", "1609250", "1617500", "1618350", "1613950", "20421600", "1616250", "1614450", "1613750", "1618600", "9737250", "1615050", "1616900", "1617150", "1613800"]:
            s.append(2)
        else:
            s.append(3)
    df[column_name] = s
    
    df = df[["Revenue.Code", "Service.Code", "Procedure.Code", "Diagnosis.Code", "Subscriber.Index", "_class"]]
    df.to_csv("train.txt", index=False)

if __name__ == "__main__":
    group_category_key()